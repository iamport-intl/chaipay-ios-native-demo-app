// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios14.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ChaiPayPaymentSDK
@_exported import ChaiPayPaymentSDK
import CryptoKit
import Foundation
import Swift
import UIKit
import WebKit
public struct InitiatePaymentResponse : Swift.Codable {
  public var isSuccess: Swift.String
  public var redirectUrl: Swift.String
  public var channelOrderRef: Swift.String
  public var merchantOrderRef: Swift.String
  public var orderRef: Swift.String
  public var message: Swift.String
  public var deepLink: Swift.String
  public var additionalData: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct WebViewResponse : Swift.Codable {
  public var statusCode: Swift.String?
  public var channelOrderRef: Swift.String?
  public var status: Swift.String?
  public var merchantOrderRef: Swift.String?
  public var statusReason: Swift.String?
  public var chaipayOrderRef: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DefaultConfig : Swift.Codable {
  public var chaipayKey: Swift.String
  public var paymentChannel: Swift.String
  public var paymentMethod: Swift.String
  public var merchantOrderId: Swift.String
  public var amount: Swift.Int
  public var currency: Swift.String?
  public var signatureHash: Swift.String
  public var billingAddress: ChaiPayPaymentSDK.BillingDetails?
  public var shippingAddress: ChaiPayPaymentSDK.ShippingDetails?
  public var orderDetails: [ChaiPayPaymentSDK.OrderDetails]?
  public var successURL: Swift.String?
  public var failureURL: Swift.String?
  public var redirectURL: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case chaipayKey
    case paymentChannel
    case paymentMethod
    case merchantOrderId
    case amount
    case currency
    case successURL
    case failureURL
    case redirectURL
    case signatureHash
    case billingAddress
    case shippingAddress
    case orderDetails
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(chaipayKey: Swift.String, paymentChannel: Swift.String, paymentMethod: Swift.String, merchantOrderId: Swift.String, amount: Swift.Int, currency: Swift.String, signatureHash: Swift.String, billingAddress: ChaiPayPaymentSDK.BillingDetails, shippingAddress: ChaiPayPaymentSDK.ShippingDetails, orderDetails: [ChaiPayPaymentSDK.OrderDetails], successURL: Swift.String, failureURL: Swift.String, redirectURL: Swift.String)
}
extension DefaultConfig {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BillingDetails : Swift.Codable {
  public var billingName: Swift.String?
  public var billingEmail: Swift.String?
  public var billingPhone: Swift.String?
  public var billingAddress: ChaiPayPaymentSDK.BillingAddress?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case billingName
    case billingEmail
    case billingPhone
    case billingAddress
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(billingName: Swift.String, billingEmail: Swift.String, billingPhone: Swift.String, billingAddress: ChaiPayPaymentSDK.BillingAddress)
}
extension BillingDetails {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BillingAddress : Swift.Codable {
  public var city: Swift.String?
  public var countryCode: Swift.String?
  public var locale: Swift.String?
  public var line1: Swift.String?
  public var line2: Swift.String?
  public var postalCode: Swift.String?
  public var state: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case city
    case countryCode
    case locale
    case line1
    case line2
    case postalCode
    case state
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(city: Swift.String, countryCode: Swift.String, locale: Swift.String, line1: Swift.String, line2: Swift.String, postalCode: Swift.String, state: Swift.String)
}
extension BillingAddress {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ShippingDetails : Swift.Codable {
  public var shippingName: Swift.String?
  public var shippingEmail: Swift.String?
  public var shippingPhone: Swift.String?
  public var shippingAddress: ChaiPayPaymentSDK.ShippingAddress?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case shippingName
    case shippingEmail
    case shippingPhone
    case shippingAddress
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(shippingName: Swift.String, shippingEmail: Swift.String, shippingPhone: Swift.String, shippingAddress: ChaiPayPaymentSDK.ShippingAddress)
}
extension ShippingDetails {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ShippingAddress : Swift.Codable {
  public var city: Swift.String?
  public var countryCode: Swift.String?
  public var locale: Swift.String?
  public var line1: Swift.String?
  public var line2: Swift.String?
  public var postalCode: Swift.String?
  public var state: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case city
    case countryCode
    case locale
    case line1
    case line2
    case postalCode
    case state
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(city: Swift.String, countryCode: Swift.String, locale: Swift.String, line1: Swift.String, line2: Swift.String, postalCode: Swift.String, state: Swift.String)
}
extension ShippingAddress {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OrderDetails : Swift.Codable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var price: Swift.Int?
  public var quantity: Swift.Int?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case name
    case price
    case quantity
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(id: Swift.String, name: Swift.String, price: Swift.Int, quantity: Swift.Int)
}
extension OrderDetails {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum PaymentMethod {
  case ZaloPay
  case MomoPay
  case VNPay
  public var paymentChannel: Swift.String {
    get
  }
  public var paymentMethod: Swift.String {
    get
  }
  public static func == (a: ChaiPayPaymentSDK.PaymentMethod, b: ChaiPayPaymentSDK.PaymentMethod) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum EnvironmentType {
  case prod
  case dev
  public static func == (a: ChaiPayPaymentSDK.EnvironmentType, b: ChaiPayPaymentSDK.EnvironmentType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class Checkout {
  public init(environmentType: ChaiPayPaymentSDK.EnvironmentType, redirectURL: Swift.String?)
  public func initiateWalletPayments(_ config: ChaiPayPaymentSDK.DefaultConfig, onCompletionHandler: @escaping (Swift.Result<ChaiPayPaymentSDK.InitiatePaymentResponse, Swift.Error>) -> Swift.Void)
  public func startNewCardPayment(_ config: ChaiPayPaymentSDK.DefaultConfig, onCompletionHandler: @escaping (Swift.Result<ChaiPayPaymentSDK.InitiatePaymentResponse, Swift.Error>) -> Swift.Void)
  public func startSavedCardPayment(_ config: ChaiPayPaymentSDK.DefaultConfig, onCompletionHandler: @escaping (Swift.Result<ChaiPayPaymentSDK.InitiatePaymentResponse, Swift.Error>) -> Swift.Void)
  @objc deinit
}
@objc public class CheckoutViewController : UIKit.UIViewController {
  public init(redirectUrl: Swift.String, checkOut: ChaiPayPaymentSDK.Checkout?, completion: () -> (Any))
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension CheckoutViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
